{"version":3,"sources":["plugins/api.js","page/classify/classify.js"],"names":["API","ARTICLE_FIND","ARTICLE_DETAILS","BANNER_FIND","CATEGORY_FIND_ALL","Content","Layout","Sider","Classify","props","getClassify","self","axios","get","then","data","classifyList","state","setState","getArticleList","current","params","category","classifyValue","code","result","list","total","articleList","articleTotal","classifyChange","value","title","articleCurrent","this","isShowSlider","isMobileOrPc","classifyHtml","map","item","index","className","key","onClick","bind","articleItem","forEach","outline","length","slice","linkTo","_id","push","createTime","image","categoryName","width","transitionName","transitionAppear","transitionAppearTimeout","transitionEnterTimeout","transitionLeaveTimeout","to","src","alt","Component"],"mappings":"wHAQeA,IAPI,CACjBC,aAAc,qBACdC,gBAAiB,wBACjBC,YAAa,oBACbC,kBAAmB,2B,iNCMbC,EAAmBC,IAAnBD,QAASE,EAAUD,IAAVC,MAEXC,E,kDACJ,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IAgBRC,YAAc,WACZ,IAAMC,EAAI,eACVC,IAAMC,IAAIb,IAAII,mBACXU,MAAK,YAAc,IAAXC,EAAU,EAAVA,KACDC,EAAY,sBAAOL,EAAKM,MAAMD,cAAlB,YAAkCD,IACpDJ,EAAKO,SAAS,CACZF,qBAvBW,EA4BnBG,eAAiB,SAACC,GAChB,IAAMT,EAAI,eACJU,EAAS,CACbD,UACAE,SAAUX,EAAKM,MAAMM,eAEvBX,IAAMC,IAAIb,IAAIC,aAAc,CAAEoB,WAC3BP,MAAK,YAAc,IAAXC,EAAU,EAAVA,KACP,GAAkB,IAAdA,EAAKS,KAAY,CAAC,IAAD,EACKT,EAAKU,OAArBC,EADW,EACXA,KAAMC,EADK,EACLA,MACdhB,EAAKO,SAAS,CACZU,YAAaF,EACbG,aAAcF,SAxCL,EA+CnBG,eAAiB,SAACC,GAChB,IAAMpB,EAAI,eACVA,EAAKO,SAAS,CACZK,cAAeQ,IACf,WACApB,EAAKQ,qBAlDP,EAAKF,MAAQ,CACXM,cAAe,KACfP,aAAc,CAAC,CAACgB,MAAO,eAAMD,MAAO,OACpCE,eAAgB,EAChBL,YAAa,GACbC,aAAc,GAPC,E,gEAWJK,KACRxB,cADQwB,KAERf,mB,+BA4CG,IAAD,OAEHgB,GAAe,EACdC,gBACHD,GAAe,GAGjB,IAAME,EAAeH,KAAKjB,MAAMD,aAAasB,KAAI,SAACC,EAAKC,GAAN,OAC/C,uBACEC,UAAW,EAAKxB,MAAMM,gBAAgBgB,EAAKR,MAAM,SAAS,GAC1DW,IAAKF,EACLG,QAAS,EAAKb,eAAec,KAAK,EAAKL,EAAKR,QAC5CQ,EAAKP,UAGLa,EAAc,GAqBlB,OApBAX,KAAKjB,MAAMW,YAAYkB,SAAQ,SAACP,GAE9B,IAAMQ,EAAUR,EAAKQ,QAAQC,OAAQ,IAArB,UACTT,EAAKQ,QAAQE,MAAM,EAAG,KADb,OACyBV,EAAKQ,QAGxCG,EAAM,oCAAgCX,EAAKY,KAGjDN,EAAYO,KAAK,CACfpB,MAAOO,EAAKP,MACZe,UACAM,WAAYd,EAAKc,WACjBH,SACAI,MAPY,GAQZhC,SAAUiB,EAAKjB,SACfiC,aAAchB,EAAKgB,kBAKrB,kBAAC,IAAD,CAAQd,UAAU,YACdN,EAKA,kBAAC5B,EAAD,CAAOiD,MAAO,IAAKf,UAAU,mBACzBJ,GALJ,4BAAQI,UAAU,mBACdJ,GAON,kBAAChC,EAAD,CAASoC,UAAU,iBAEjB,wBAAIA,UAAU,WAEVI,EAAYP,KAAI,SAACC,EAAMC,GAAP,OACd,kBAAC,IAAD,CACEE,IAAKF,EACLiB,eAAe,UACfC,kBAAkB,EAClBC,wBAAyB,IACzBC,uBAAwB,IACxBC,uBAAwB,KAExB,wBAAIpB,UAAU,gBACZ,yBAAKA,UAAU,aACZF,EAAKe,MAEF,yBAAKb,UAAU,kBACb,kBAAC,IAAD,CAAMqB,GAAIvB,EAAKW,OAAQlB,MAAOO,EAAKP,OACjC,yBAAK+B,IAAKxB,EAAKe,MAAOU,IAAKzB,EAAKP,UAGlC,GAEN,6BACE,kBAAC,IAAD,CAAM8B,GAAIvB,EAAKW,QACb,uBAAGT,UAAU,oBACVF,EAAKP,QAGV,uBAAGS,UAAU,mBAAmBF,EAAKQ,WAGzC,yBAAKN,UAAU,eACb,0BAAMA,UAAU,MACd,uBAAGA,UAAU,cACXF,EAAKgB,cAET,0BAAMd,UAAU,QAAO,uBAAGA,UAAU,eAAiBF,EAAKc,YAEvDlB,EAGD,0BAAMM,UAAU,QACd,kBAAC,IAAD,CAAMqB,GAAIvB,EAAKW,QAAf,6BAHF,gB,GAlJDe,aAoKRzD","file":"static/js/8.db886c65.chunk.js","sourcesContent":["// 后台接口api的链接\r\nexport const API = {\r\n  ARTICLE_FIND: '/blog/article/find', // 条件查询文章列表\r\n  ARTICLE_DETAILS: '/blog/article/details', // 查询文章详情\r\n  BANNER_FIND: '/blog/banner/find', // 查询banner\r\n  CATEGORY_FIND_ALL: '/blog/category/findAll' // 获取全部分类类型\r\n};\r\n\r\nexport default API;\r\n","import './classify.scss';\r\nimport React, { Component } from 'react';\r\nimport axios from 'axios';\r\nimport API from \"../../plugins/api\";\r\nimport {\r\n  Layout,\r\n} from 'antd';\r\nimport {isMobileOrPc} from \"../../utils/utils\";\r\nimport ReactCSSTransitionGroup from \"react-addons-css-transition-group\";\r\nimport {Link} from \"react-router-dom\";\r\n\r\nconst { Content, Sider } = Layout;\r\n\r\nclass Classify extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      classifyValue: null,\r\n      classifyList: [{title: \"全部\", value: null}],\r\n      articleCurrent: 1,\r\n      articleList: [],\r\n      articleTotal: 0,\r\n    };\r\n  }\r\n  componentDidMount() {\r\n    const self = this;\r\n    self.getClassify(); // 获取分类列表\r\n    self.getArticleList(); // 获取文章列表\r\n  }\r\n\r\n  // 获取分类列表\r\n  getClassify = ()=> {\r\n    const self = this;\r\n    axios.get(API.CATEGORY_FIND_ALL)\r\n      .then(({ data }) =>{\r\n        const classifyList = [...self.state.classifyList,...data];\r\n        self.setState({\r\n          classifyList\r\n        });\r\n      })\r\n  };\r\n  // 获取文章列表\r\n  getArticleList = (current)=> {\r\n    const self = this;\r\n    const params = {\r\n      current,\r\n      category: self.state.classifyValue\r\n    };\r\n    axios.get(API.ARTICLE_FIND, { params })\r\n      .then(({ data }) =>{\r\n        if (data.code === 0) {\r\n          const { list, total } = data.result;\r\n          self.setState({\r\n            articleList: list,\r\n            articleTotal: total\r\n          });\r\n        }\r\n      })\r\n  };\r\n\r\n  // 分类选择\r\n  classifyChange = (value)=> {\r\n    const self = this;\r\n    self.setState({\r\n      classifyValue: value\r\n    },() => {\r\n      self.getArticleList();\r\n    });\r\n  };\r\n\r\n\r\n  render() {\r\n    // 检测屏幕\r\n    let isShowSlider = false;\r\n    if (!isMobileOrPc()) {\r\n      isShowSlider = true;\r\n    }\r\n    // 循环导航列表\r\n    const classifyHtml = this.state.classifyList.map((item,index) =>\r\n      <p\r\n        className={this.state.classifyValue===item.value?'active':''}\r\n        key={index}\r\n        onClick={this.classifyChange.bind(this,item.value)}\r\n      >{item.title}</p>\r\n    );\r\n    // 循环文章列表\r\n    let articleItem = [];\r\n    this.state.articleList.forEach((item) =>{\r\n      // 将简介中加入省略号\r\n      const outline = item.outline.length> 100\r\n        ? `${item.outline.slice(0, 100)}...` : item.outline;\r\n      // 处理连接跳转\r\n      // const linkTo = { path :\"/articleDetails\",query: { id: item._id } };\r\n      const linkTo = `/articleDetails?articleId=${item._id}`;\r\n      const image = \"\";\r\n      // 处理循环样式\r\n      articleItem.push({\r\n        title: item.title,\r\n        outline,\r\n        createTime: item.createTime,\r\n        linkTo,\r\n        image,\r\n        category: item.category,\r\n        categoryName: item.categoryName,\r\n      })\r\n    });\r\n    // 返回页面\r\n    return (\r\n      <Layout className=\"classify\">\r\n        {!isShowSlider ? (\r\n          <header className=\"classify-header\">\r\n            { classifyHtml }\r\n          </header>\r\n        ) : (\r\n          <Sider width={330} className=\"classify-slider\">\r\n            { classifyHtml }\r\n          </Sider>\r\n        )}\r\n        <Content className=\"classify-main\">\r\n          {/*文章列表*/}\r\n          <ul className=\"article\">\r\n            {\r\n              articleItem.map((item, index) =>\r\n                <ReactCSSTransitionGroup\r\n                  key={index}\r\n                  transitionName=\"example\"\r\n                  transitionAppear={true}\r\n                  transitionAppearTimeout={1000}\r\n                  transitionEnterTimeout={1000}\r\n                  transitionLeaveTimeout={1000}\r\n                >\r\n                  <li className=\"article-item\">\r\n                    <div className=\"item-cont\">\r\n                      {item.image?\r\n                        (\r\n                          <div className=\"item-cont--img\">\r\n                            <Link to={item.linkTo} title={item.title}>\r\n                              <img src={item.image} alt={item.title} />\r\n                            </Link>\r\n                          </div>\r\n                        ) : \"\"\r\n                      }\r\n                      <div>\r\n                        <Link to={item.linkTo}>\r\n                          <p className=\"item-cont--title\">\r\n                            {item.title}\r\n                          </p>\r\n                        </Link>\r\n                        <p className=\"item-cont--info\">{item.outline}</p>\r\n                      </div>\r\n                    </div>\r\n                    <div className=\"item-author\">\r\n                      <span className=\"lm\">\r\n                        <i className=\"icon-tag2\" />\r\n                        { item.categoryName }\r\n                      </span>\r\n                      <span className=\"time\"><i className=\"icon-time1\" />{ item.createTime }</span>\r\n                      {/*<span className=\"num\">浏览（<a href=\"/\">12</a>）</span>*/}\r\n                      { !isShowSlider ? (\r\n                        ''\r\n                      ): (\r\n                        <span className=\"more\">\r\n                          <Link to={item.linkTo}>阅读原文</Link>\r\n                        </span>\r\n                      )}\r\n                    </div>\r\n                  </li>\r\n                </ReactCSSTransitionGroup>\r\n              )\r\n            }\r\n          </ul>\r\n        </Content>\r\n      </Layout>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Classify;\r\n"],"sourceRoot":""}